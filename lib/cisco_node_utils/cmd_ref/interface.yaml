# interface
---
_template:
  grpc:
    config_get: "show running interface"
  nxapi:
    config_get: "show running interface all"

access_vlan:
  config_get_token: ['/^interface %s$/i', '/^switchport access vlan (.*)$/']
  config_set: ["interface %s", "switchport access vlan %s"]
  default_value: 1

admin_state_ethernet_noswitchport_shutdown:
  # TODO: is this actually used?
  nxapi:
    /N7K/:
      default_value: "shutdown"

all_interfaces:
  config_get_token: '/^interface (.*)/'

create:
  config_set: "interface %s"

description:
  config_get_token: ['/^interface %s$/i', '/^description (.*)/']
  config_set: ["interface %s", "%s description %s"]
  default_value: ""

destroy:
  config_set: "no interface %s"

encapsulation_dot1q:
  config_get_token: ['/^interface %s$/i', '/^encapsulation dot1q (.*)/']
  config_set: ["interface %s", "%s encapsulation dot1q %s"]
  default_value: ""

feature_lacp:
  config_get: "show running | i ^feature"
  config_get_token: '/^feature lacp$/'
  config_set: "%s feature lacp"

feature_vlan:
  config_get: "show running | i ^feature"
  config_get_token: '/^feature interface-vlan$/'
  config_set: "%s feature interface-vlan"

ipv4_addr_mask:
  config_get_token: [
  '/^interface %s$/i',
  '/^ip address ([0-9\.]+)[\s\/](.*)/'
  ]
  config_set: ["interface %s", "%s ip address %s"]

ipv4_address:
  default_value: ~

ipv4_netmask_length:
  default_value: ~

ipv4_proxy_arp:
  config_get_token: [
  '/^interface %s$/i',
  '/^ip proxy-arp$/'
  ]
  config_set: ["interface %s", "%s ip proxy-arp"]
  default_value: false

ipv4_redirects_loopback:
  nxapi:
    /N7K/:
      default_value: false
      config_set: ~
      config_get: ~
      config_get_token: ~
    else:
      config_get_token: [
      '/^interface %s$/i',
      '/^((?:no )?ip redirects)$/'
      ]
      config_set: ["interface %s", "%s ip redirects"]
      default_value: true
  test_config_get_regex: [!ruby/regexp '/^\s+no ip redirects/']
  test_config_result:
    false: RuntimeError
    true: RuntimeError

ipv4_redirects_other_interfaces:
  config_get_token: [
  '/^interface %s$/i',
  '/^((?:no )?ip redirects)$/'
  ]
  config_set: ["interface %s", "%s ip redirects"]
  default_value: true
  test_config_get_regex: [!ruby/regexp '/^\s+no ip redirects/']
  test_config_result:
    false: false
    true: true

mtu:
  config_get_token: ['/^interface %s$/i', '/^mtu (.*)$/']
  config_set: ["interface %s", "%s mtu %s"]
  default_value: 1500

negotiate_auto_ethernet:
  /(N7K|C3064)/:
    config_get: ~
    config_set: ~
    config_get_token: ~
    default_value: false
  else:
    config_get_token: [
    '/^interface %s$/i',
    '/^negotiate auto$/'
    ]
    config_set: ["interface %s", "%s negotiate auto"]
    default_value: true
  test_config_get_regex: [
  !ruby/regexp '/^\s+no negotiate auto/',
  !ruby/regexp '/^\s+negotiate auto/'
  ]

negotiate_auto_other_interfaces:
  config_get: ~
  default_value: false
  test_config_result:
    false: RuntimeError
    true: RuntimeError

negotiate_auto_portchannel:
  /N7K/:
    config_get: ~
    config_get_token: ~
    config_set: ~
    default_value: false
  else:
    config_get_token: [
    '/^interface %s$/i',
    '/^negotiate auto$/'
    ]
    config_set: ["interface %s", "%s negotiate auto"]
    default_value: true
  test_config_get_regex: [
  !ruby/regexp '/^\s+no negotiate auto/',
  !ruby/regexp '/^\s+negotiate auto/'
  ]

shutdown:
  config_get_token: ['/^interface %s$/i', '/^shutdown$/']
  config_set: ["interface %s", "%s shutdown"]

shutdown_ether_channel:
  default_value: false

shutdown_ethernet_noswitchport_noshutdown:
  default_value: false

shutdown_ethernet_noswitchport_shutdown:
  default_value: false

shutdown_ethernet_switchport_noshutdown:
  default_value: false

shutdown_ethernet_switchport_shutdown:
  default_value: true

shutdown_loopback:
  default_value: false

shutdown_unknown:
  default_value: true

shutdown_vlan:
  default_value: true

svi_autostate:
  config_get_token: ['/^interface %s$/i', '/^autostate$/']
  config_set: ["interface %s", "%s autostate"]
  default_value: true
  test_config_result:
    false: false
    true: true

svi_management:
  config_get_token: ['/^interface %s$/i', '/^management$/']
  config_set: ["interface %s", "%s management"]
  default_value: false

switchport:
  config_get_token: ['/^interface %s$/i', '/^switchport$/']
  config_set: ["interface %s", "%s switchport"]
  # default_value: n/a. This is derived from system_default_switchport

switchport_autostate_exclude:
  config_get_token: ['/^interface %s$/i', '/(^switchport autostate exclude)/']
  config_set: ["interface %s", "%s switchport autostate exclude"]
  default_value: false

switchport_mode_dot1q_tunnel:
  test_config_result:
    false: RuntimeError

switchport_mode_ethernet:
  config_get_token: ['/^interface %s$/i', '/^switchport mode (.*)$/']
  config_set: ["interface %s", "%s switchport mode %s"]
  default_value: "access"

switchport_mode_other_interfaces:
  config_get: ~
  default_value: ""

switchport_mode_port_channel:
  config_get_token: ['/^interface %s$/i', '/^switchport mode (.*)$/']
  config_set: ["interface %s", "%s switchport mode %s"]
  default_value: ""

switchport_trunk_allowed_vlan:
  config_get_token: [
    '/^interface %s$/i',
    '/^switchport trunk allowed vlan (.*)$/'
  ]
  config_set: ["interface %s", "%s switchport trunk allowed vlan %s"]
  default_value: "all"

switchport_trunk_native_vlan:
  config_get_token: [
    '/^interface %s$/i',
    '/^switchport trunk native vlan (.*)$/'
  ]
  config_set: ["interface %s", "%s switchport trunk native vlan %s"]
  default_value: 1

system_default_svi_autostate:
  config_get: "show running all | include 'system default'"
  config_get_token: ['/^system default interface-vlan autostate$/']
  # default_value: n/a. This is a user-configurable system default.

system_default_switchport:
  config_get: "show running all | include 'system default'"
  config_get_token: ['/^system default switchport$/']
  # default_value: n/a. This is a user-configurable system default.

system_default_switchport_shutdown:
  config_get: "show running all | include 'system default'"
  config_get_token: ['/^system default switchport shutdown$/']
  # default_value: n/a. This is a user-configurable system default.

vrf:
  config_get_token: ['/^interface %s$/i', '/^vrf member (.*)/']
  config_set: ["interface %s", "%s vrf member %s"]
  default_value: ""

vtp:
  config_get_token: ['/^interface %s$/i', '/^vtp *$/']
  config_set: ["interface %s", "%s vtp"]
  default_value: false
