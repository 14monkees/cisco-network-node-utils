#!/bin/bash
#
# Hook script to verify what is about to be pushed.
# Called by "git push" after it has checked the remote status, but before
# anything has been pushed.
# If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>

# Run rubocop
echo "Running RuboCop..."
rubocop
result=$?
if [ $result -ne 0 ] ; then
    echo
    echo "Please fix all RuboCop failures before pushing upstream."
    echo
    exit $result
fi
echo "RuboCop passes - good work!"

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

IFS=' '
while read local_ref local_sha remote_ref remote_sha
do
    if [ "$local_sha" = $z40 ] ; then
        # ignore delete
        :
    elif [ "$remote_sha" = $z40 ] ; then
        # don't require changelog in a newly created branch
        :
    else
        # Make sure CHANGELOG.md is updated
        echo "Checking CHANGELOG.md..."
        git diff --name-only --diff-filter=ACM $remote_sha $local_sha |
            grep 'CHANGELOG.md' >> /dev/null
        if [ $? != 0 ] ; then
            echo "Please update CHANGELOG.md before pushing code upstream."
            exit 1
        fi
        echo "Thanks for updating the changelog!"
    fi
done
